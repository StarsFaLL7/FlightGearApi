// <auto-generated />
using System;
using FlightGearApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlightGearApi.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20231228072927_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlightGearApi.Infrastructure.ModelsDal.FlightPropertiesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AccelerationNormal")
                        .HasColumnType("double precision");

                    b.Property<double>("AccelerationX")
                        .HasColumnType("double precision");

                    b.Property<double>("AccelerationY")
                        .HasColumnType("double precision");

                    b.Property<double>("Airspeed")
                        .HasColumnType("double precision");

                    b.Property<double>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<double>("AltitudeAbsoluteBaro")
                        .HasColumnType("double precision");

                    b.Property<double>("AltitudeAgl")
                        .HasColumnType("double precision");

                    b.Property<double>("AltitudeIndicatedBaro")
                        .HasColumnType("double precision");

                    b.Property<int>("FlightSessionId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_session_id");

                    b.Property<double>("Heading")
                        .HasColumnType("double precision");

                    b.Property<double>("HeadingMagnetic")
                        .HasColumnType("double precision");

                    b.Property<double>("HeadingMagneticIndicated")
                        .HasColumnType("double precision");

                    b.Property<double>("IndicatedSpeed")
                        .HasColumnType("double precision");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Mach")
                        .HasColumnType("double precision");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<double>("PilotOverload")
                        .HasColumnType("double precision");

                    b.Property<double>("Pitch")
                        .HasColumnType("double precision");

                    b.Property<double>("Roll")
                        .HasColumnType("double precision");

                    b.Property<double>("SideOverload")
                        .HasColumnType("double precision");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<double>("UBodyMps")
                        .HasColumnType("double precision");

                    b.Property<double>("VBodyMps")
                        .HasColumnType("double precision");

                    b.Property<double>("VerticalBaroSpeed")
                        .HasColumnType("double precision");

                    b.Property<double>("WBodyMps")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FlightSessionId");

                    b.ToTable("flight_properties_shots");
                });

            modelBuilder.Entity("FlightGearApi.Infrastructure.ModelsDal.FlightSessionDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<int>("DurationSec")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("flight_sessions");
                });

            modelBuilder.Entity("FlightGearApi.Infrastructure.ModelsDal.FlightPropertiesModel", b =>
                {
                    b.HasOne("FlightGearApi.Infrastructure.ModelsDal.FlightSessionDal", "FlightSession")
                        .WithMany("PropertiesCollection")
                        .HasForeignKey("FlightSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightSession");
                });

            modelBuilder.Entity("FlightGearApi.Infrastructure.ModelsDal.FlightSessionDal", b =>
                {
                    b.Navigation("PropertiesCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
